{
	"info": {
		"_postman_id": "30ee1f09-3074-4260-9106-666be3b62574",
		"name": "store",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "22209251"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "List products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const expectedSchema = {\r",
									"    type: \"object\",\r",
									"    required: [\"id\", \"name\", \"price\", \"sku\", \"description\"],\r",
									"    properties: {\r",
									"        id: { type: \"integer\" },\r",
									"        name: { type: \"string\" },\r",
									"        price: { type: \"number\" },\r",
									"        sku: { type: \"integer\" },\r",
									"        description: { type: \"string\" }\r",
									"    }\r",
									"};\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Sorting is correct\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    let isSorted = jsonData.every((item, index, array) => {\r",
									"        return index === 0 || array[index - 1].id <= item.id;\r",
									"    });\r",
									"    pm.expect(isSorted).to.be.true;\r",
									"});\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(tv4.validate(item, expectedSchema)).to.be.true;\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/products"
					},
					"response": []
				},
				{
					"name": "Get product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const expectedSchema = {\r",
									"    type: \"object\",\r",
									"    required: [\"id\", \"name\", \"price\", \"sku\", \"description\"],\r",
									"    properties: {\r",
									"        id: { type: \"integer\" },\r",
									"        name: { type: \"string\" },\r",
									"        price: { type: \"number\" },\r",
									"        sku: { type: \"integer\" },\r",
									"        description: { type: \"string\" }\r",
									"    }\r",
									"};\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/products/3"
					},
					"response": []
				},
				{
					"name": "Create product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const expectedSchema = {\r",
									"    type: \"object\",\r",
									"    required: [\"id\", \"name\", \"price\", \"sku\", \"description\"],\r",
									"    properties: {\r",
									"        id: { type: \"integer\" },\r",
									"        name: { type: \"string\" },\r",
									"        price: { type: \"number\" },\r",
									"        sku: { type: \"integer\" },\r",
									"        description: { type: \"string\" }\r",
									"    }\r",
									"};\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"orange\",\r\n    \"price\": 8,\r\n    \"sku\": 123321123,\r\n    \"description\": \"wouh\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/products"
					},
					"response": []
				},
				{
					"name": "Update product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const expectedSchema = {\r",
									"    type: \"object\",\r",
									"    required: [\"name\", \"price\", \"sku\", \"description\", \"id\"],\r",
									"    properties: {\r",
									"        id: { type: \"integer\" },\r",
									"        name: { type: \"string\" },\r",
									"        price: { type: \"number\" },\r",
									"        sku: { type: \"integer\" },\r",
									"        description: { type: \"string\" }\r",
									"    }\r",
									"};\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"banana\",\r\n    \"price\": 155,\r\n    \"sku\": 123321123,\r\n    \"description\": \"changed description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/products"
					},
					"response": []
				},
				{
					"name": "Remove product by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"User is deleted and returns 404\", function () {\r",
									"    pm.sendRequest({\r",
									"        url: 'http://localhost:3000/products/4',\r",
									"        method: 'GET'\r",
									"    }, function (err, response) {\r",
									"        pm.expect(response.code).to.eql(404); \r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/products/4"
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "List orders",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const expectedSchema = {\r",
									"    type: \"object\",\r",
									"    required: [\"id\", \"name\", \"sku\"],\r",
									"    properties: {\r",
									"        id: { type: \"integer\" },\r",
									"        name: { type: \"string\" },\r",
									"        sku: { type: \"integer\" }\r",
									"    }\r",
									"};\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Sorting is correct\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    let isSorted = jsonData.every((item, index, array) => {\r",
									"        return index === 0 || array[index - 1].id <= item.id;\r",
									"    });\r",
									"    pm.expect(isSorted).to.be.true;\r",
									"});\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(tv4.validate(item, expectedSchema)).to.be.true;\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/orders"
					},
					"response": []
				},
				{
					"name": "Get order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const expectedSchema = {\r",
									"    type: \"object\",\r",
									"    required: [\"id\", \"name\", \"sku\"],\r",
									"    properties: {\r",
									"        id: { type: \"integer\" },\r",
									"        name: { type: \"string\" },\r",
									"        sku: { type: \"integer\" }\r",
									"    }\r",
									"};\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/orders/3"
					},
					"response": []
				},
				{
					"name": "Create order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const expectedSchema = {\r",
									"    type: \"object\",\r",
									"    required: [\"id\", \"name\", \"sku\"],\r",
									"    properties: {\r",
									"        id: { type: \"integer\" },\r",
									"        name: { type: \"string\" },\r",
									"        sku: { type: \"integer\" }\r",
									"    }\r",
									"};\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/orders"
					},
					"response": []
				},
				{
					"name": "Update order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const expectedSchema = {\r",
									"    type: \"object\",\r",
									"    required: [\"id\", \"name\", \"sku\"],\r",
									"    properties: {\r",
									"        id: { type: \"integer\" },\r",
									"        name: { type: \"string\" },\r",
									"        sku: { type: \"integer\" }\r",
									"    }\r",
									"};\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/orders"
					},
					"response": []
				},
				{
					"name": "Remove order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"User is deleted and returns 404\", function () {\r",
									"    pm.sendRequest({\r",
									"        url: 'http://localhost:3000/orders/4',\r",
									"        method: 'GET'\r",
									"    }, function (err, response) {\r",
									"        pm.expect(response.code).to.eql(404); \r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/orders/4"
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "List users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const expectedSchema = {\r",
									"    type: \"object\",\r",
									"    required: [\"id\", \"firstName\", \"lastName\", \"email\",\"dateOfBirth\", \"emailVerified\", \"signUpDate\", \"status\", \"level\"],\r",
									"    properties: {\r",
									"        id: { type: \"integer\" },\r",
									"        firstName: { type: \"string\" },\r",
									"        lastName: { type: \"string\" },\r",
									"        email: { type: \"string\", format: \"email\" },\r",
									"        dateOfBirth: { type: \"string\", format: \"date\" },\r",
									"        emailVerified: { type: \"boolean\" },\r",
									"        signUpDate: { type: \"string\", format: \"date\" },\r",
									"        status: { \r",
									"            type: \"string\", \r",
									"            enum: [\"active\", \"inactive\", \"pending\"] \r",
									"        },\r",
									"        level: { \r",
									"            type: \"string\", \r",
									"            enum: [\"admin\", \"consumer\"] \r",
									"        }\r",
									"    }\r",
									"};\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Sorting is correct\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    let isSorted = jsonData.every((item, index, array) => {\r",
									"        return index === 0 || array[index - 1].id <= item.id;\r",
									"    });\r",
									"    pm.expect(isSorted).to.be.true;\r",
									"});\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    jsonData.forEach(function(item) {\r",
									"        pm.expect(tv4.validate(item, expectedSchema)).to.be.true;\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users"
					},
					"response": []
				},
				{
					"name": "Get user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const expectedSchema = {\r",
									"    type: \"object\",\r",
									"    required: [\"id\", \"firstName\", \"lastName\", \"email\",\"dateOfBirth\", \"emailVerified\", \"signUpDate\", \"status\", \"level\"],\r",
									"    properties: {\r",
									"        id: { type: \"integer\" },\r",
									"        firstName: { type: \"string\" },\r",
									"        lastName: { type: \"string\" },\r",
									"        email: { type: \"string\", format: \"email\" },\r",
									"        dateOfBirth: { type: \"string\", format: \"date\" },\r",
									"        emailVerified: { type: \"boolean\" },\r",
									"        signUpDate: { type: \"string\", format: \"date\" },\r",
									"        status: { \r",
									"            type: \"string\", \r",
									"            enum: [\"active\", \"inactive\", \"pending\"] \r",
									"        },\r",
									"        level: { \r",
									"            type: \"string\", \r",
									"            enum: [\"admin\", \"consumer\"] \r",
									"        }\r",
									"    }\r",
									"};\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/users/3"
					},
					"response": []
				},
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const expectedSchema = {\r",
									"    type: \"object\",\r",
									"    required: [\"id\", \"firstName\", \"lastName\", \"email\",\"dateOfBirth\", \"emailVerified\", \"signUpDate\", \"status\", \"level\"],\r",
									"    properties: {\r",
									"        id: { type: \"integer\" },\r",
									"        firstName: { type: \"string\" },\r",
									"        lastName: { type: \"string\" },\r",
									"        email: { type: \"string\", format: \"email\" },\r",
									"        dateOfBirth: { type: \"string\", format: \"date\" },\r",
									"        emailVerified: { type: \"boolean\" },\r",
									"        signUpDate: { type: \"string\", format: \"date\" },\r",
									"        status: { \r",
									"            type: \"string\", \r",
									"            enum: [\"active\", \"inactive\", \"pending\"] \r",
									"        },\r",
									"        level: { \r",
									"            type: \"string\", \r",
									"            enum: [\"admin\", \"consumer\", \"lord\"] \r",
									"        }\r",
									"    }\r",
									"};\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Dream\",\r\n    \"lastName\": \"Real\",\r\n    \"email\": \"dream.real@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users"
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const expectedSchema = {\r",
									"    type: \"object\",\r",
									"    required: [\"id\", \"firstName\", \"lastName\", \"email\",\"dateOfBirth\", \"emailVerified\", \"signUpDate\", \"status\", \"level\"],\r",
									"    properties: {\r",
									"        id: { type: \"integer\" },\r",
									"        firstName: { type: \"string\" },\r",
									"        lastName: { type: \"string\" },\r",
									"        email: { type: \"string\", format: \"email\" },\r",
									"        dateOfBirth: { type: \"string\", format: \"date\" },\r",
									"        emailVerified: { type: \"boolean\" },\r",
									"        signUpDate: { type: \"string\", format: \"date\" },\r",
									"        status: { \r",
									"            type: \"string\", \r",
									"            enum: [\"active\", \"inactive\", \"pending\"] \r",
									"        },\r",
									"        level: { \r",
									"            type: \"string\", \r",
									"            enum: [\"admin\", \"consumer\", \"lord\"] \r",
									"        }\r",
									"    }\r",
									"};\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, expectedSchema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ilon\",\r\n    \"lastName\": \"Mask\",\r\n    \"email\": \"ilon.mask@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\",\r\n    \"id\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/users"
					},
					"response": []
				},
				{
					"name": "Remove user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"User is deleted and returns 404\", function () {\r",
									"    pm.sendRequest({\r",
									"        url: 'http://localhost:3000/users/10',\r",
									"        method: 'GET'\r",
									"    }, function (err, response) {\r",
									"        pm.expect(response.code).to.eql(404); \r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/users/10"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}